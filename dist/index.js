class n{#e;#t;#s=0;#n=this.#h.bind(this);#i=this.#c.bind(this);#o=this.#d.bind(this);#r=this.#u.bind(this);constructor({url:e,reconnectInterval:t,maxReconnectAttempts:s,debug:i}){this.#t={url:e,debug:i||!1,reconnectInterval:!t||t<100?100:t,maxReconnectAttempts:!s||s<1?0:s}}connect(){if(!this.#e||this.#e.readyState===WebSocket.CLOSED)this.#e=new WebSocket(this.#t.url),this.#e.addEventListener("open",this.#n),this.#e.addEventListener("close",this.#i),this.#e.addEventListener("error",this.#o),this.#e.addEventListener("message",this.#r);return this}disconnect(){if(this.#e)this.#e.close();return this}sendJson(e,t){if(!this.#e)throw new Error("WebSocket is not connected");return this.#t.debug&&console.info("WebSocket message sent",e,t),this.#e.send(JSON.stringify({event:e,data:t})),this}#h(e){this.#t.debug&&console.info(e),this.#s=0}#c(e){if(this.#t.debug&&console.info("WebSocket connection closed",e),!this.#e)return;if(this.#e.removeEventListener("open",this.#n),this.#e.removeEventListener("close",this.#i),this.#e.removeEventListener("error",this.#o),this.#e.removeEventListener("message",this.#r),this.#e=void 0,e.code===1000)return;setTimeout(()=>{this.#a()},this.#t.reconnectInterval)}#d(e){this.#t.debug&&console.error("WebSocket error",e)}#u(e){this.#t.debug&&console.info("WebSocket message received",e)}#a(){if(this.#s>=this.#t.maxReconnectAttempts)return;if(this.#t.maxReconnectAttempts<1)return this.connect();if(this.#s<this.#t.maxReconnectAttempts)this.#s++,this.connect()}get readyState(){return this.#e?.readyState}}export{n as SocketClient};
